Programmering Suger
----

Draft 2.

# Hvem er jeg?
Hei, for de som ikke kjenner meg er jeg Ken. Har jobbet litt over ett år og har
sittet meste parten av tiden min i forvaltning. Dvs jeg koder litt, rantet litt
 og spiller foosball.

# Hva skal jeg snakke om?
Jeg skal snakke om hvorfor programmering suger.

(Skifte slide)

Ingen vits å hisse seg opp, bro, enda, jeg kommer forhåpentligvis
frem til et poeng etterhvert.


# Hva er programmering
Okok. La oss begynne her. Så "Hva er programmering" eller "hva gjør en
programmerer". Hvis dere skulle forklart hva programmering er og hvordan
en typisk dag ser ut for en utvikler. Hvor mange ville kommet med en
forklaring som ligner på denne definisjonen?


"   [Programming] is clumping things together
    with half-dried glue and praying that it holds water
    long enough to replace it with a new clump of things.   "


Så hvor ønsker vi å være. Jeg skulle ønske jeg kunne si, og det er sikkert
noen her inne som helt sikkert sier det, at


"   Programmering er å løse problemer     "


eller at vi utviklere er problemløsere. Vi utviklere bruker mye tid på ting som ikke
skaper verdi. Jeg mener det er rett og slett fordi utviklermiljøene generelt sett er fremmed
fientlige. De liker ikke mennesker og hvertfall ikke utviklere.

Så jeg tenkte jeg skulle snakke om de tingene som jeg synes suger med programmering.

## Oppsett

Oppsett av et nytt prosjekt er alltid et mareritt. Til og med å sette opp
mitt eget prosjekt på en ny datamaskin er noe dritt. Man kan fort bruke store
deler av arbeidsuken på å sette opp prosjektet. Og det er det ingen som liker.
Alt fra config til pakker.

Og ikke minst dokumentasjonen som forklarer oppsettet er aldri komplett.
Så jeg kan lett konkludere med at alle techere i dette rommet har fortjent
denne sertifiseringen.

Config er noe dritt. Det er umulig å vite om du har configurert opp ting riktig.
Så lenge det er riktig syntax så får du ingen feilmelding, men hvis du ikke har
satt det opp helt korrekt funker ingenting. Og du skjønner ingenting.

Pakker er noe dritt. For det første så
er du avhengig av å ha et pakkehåndteringsverktøy, og det må være installert på
rett måte. Hvis ikke går alt til helvete. Og når du endelig har fått satt det
opp og prøver å kjøre pakkehåndteringen så får du


"   Could not resolve dependency for ..... "


Så du googler etter løsningen, og som regel er løsningen grei. Så grei at du ikke
helt skjønner hvorfor det magiske verktøyet ditt ikke kan ordne det.


## Skriving

Å skrive kode er, som Chris Granger sier, indirekte og ikke mulig å observere.
Programmering er en er rett og slett en oversettelsesprosess der man gjør mange feil.
Selv matte. La oss ta dette eksempelet.

"   Standardavvik i C   "

Kan noen umiddelbart se hva dette er? Hva med dette?

"   Standardavvik i notasjon  "

Eller når dette

"  Kort[0][12]  "

Ah! Jeg elsker når jeg får utdelt kort[0][12]. Som egentlig bare er Spar Ess og
kan enkelt representeres slik.

Ja, jeg dere sitter nok der å tenker at dette er bare dårlig gode og
kan fikses med litt mer arbeid. Men selv når
vi vet alt dette så klarer vi gang på gang å produsere kode som "kort[0][12]".
For det dukker opp stadig vekk.

Dette gjelder både erfarne, uerfarne programmere og jeg skriver MYE sånn kode.
Ikke fordi man er en dårlig programmerer, men fordi vi "hadde dårlig tid"
eller fordi vi rett og slett glemmer å tenke over at andre skal lese det.

Så? Hvordan løser vi dette? En fremgangsmåte er tettere feedback-loop. Tenk
dere en idé som kan visualisere data for deg mens du programmerer.

Så et av problemene våre er verktøy. Et annet er feilmeldinger.

## Feilmeldinger

NullReferenceException. Dette sier meg ingenting. What the hell?


"   Object reference not set to an instance of an object  "


Takk for at du prøvde. Hvorfor er det ingen informasjon til hvorfor det gikk
galt. Vi vet hva som gikk galt vi fikk "NullReferenceException" slengt rett
i ansiktet. Men hva med dataene? Hva var null? Hvilken verdi kunne den hatt?
Hva forventet vi egentlig?

Så hva skjedde. La oss se... ticket var null. Ganske enkel feil i dette
tilfelle.

Det er en gjennomgående feil og fører til mye frustrasjon. Selv om akkurat
dette eksempelet var en feil i språket, er vi utviklere også skylding som
lager APIer med minst like dårlige feilmeldinger.

Tilabek til LightTable som har løst dette på en bedre måte enn
andre IDEer. Å vise exceptionen under kodelinjen der feilen skjedde.
Dette er ikke en løsning på problemet, men er steg i riktig retning.

Ting bare kræsjer i prod. Selv etter
at det har vært innom test og staging. Miljøene er AKKURAT forskjellige nok til
at det går rett til helvete. Dataene i DB er litt anderledes så querier timer ut.
Staging er ikke under samme stress som en prod-server kan være så ting kræsjer
under de ikke skal.

State of the art i dag er å logge masse, samle disse loggene, så prøve å
gå backover fra der ting feilet og reprodusere feil. Det er noe dritt. Særlig
siden loggene er skrevet av oss og mest sannsynligvis ikke inneholder de
dataene vi trenger.

Mitt ønske for å løse dette er å kunne debugge rett i en prod-node utviklerne
kun har tilgang til. Og hvor deilig hadde det ikke vært hvis man kunne attache
debuggeren.


## Deploy

La oss snakke om deploy. For det første er det å deploye noe utrolig mye
vanskeligere enn det man skulle tro. SSH inn der, last ned koden der, kjør den
her, RDP der, start databasen der... Og RDP inn der.

Det er også så sykt mange forskjellige måter å deploye apps på, og så mange
ting som må være installert for at det skal fungere. Noe av tingene er satt opp
fordi det er nyttig og hjelper programene våre skalere. Mens andre ting er satt
der... fordi arkitektur...

Disse tingene er i veien. Og man ender opp å bruke flere dager på å sette
opp ting. Noe man kunne brukt på å skape verdi. Akkurat her er synes jeg
kombinasjonen av microservices og platformer som heroku kan gi deg mye.
Men at man fortsatt må kunne sette opp egne løsninger hvis platformen begrenser
verdiskapning.
